/*!
  \mainpage Architecture Commune Arcade
  Bienvenu sur cette Architecture Commune de l'Arcade.
  Projet de 2ème année au sein de Epitech.

  Source Tree:
  ```txt
  include/
  ├── Api.hpp
  └── Arcade
      ├── ArcadeStruct.hpp
      ├── Core
      │   ├── ICore.hpp
      │   ├── IDisplayModule.hpp
      │   └── IGameModule.hpp
      ├── ECS
      │   ├── IComponent.hpp
      │   ├── IEntity.hpp
      │   ├── IEntityManager.hpp
      │   ├── IEventManager.hpp
      │   ├── ISystem.hpp
      │   └── ISystemManager.hpp
      ├── Game
      │   └── IScene.hpp
      └── Graph
          ├── GraphStruct.hpp
          ├── IMusic.hpp
          ├── ISprite.hpp
          └── IText.hpp

  6 directories, 16 files
  ```
  <a href="https://github.com/ARCADE-TEK-2026/archi_arcade/blob/gh-pages/uml.svg">uml svg link</a>

  <a href="https://github.com/ARCADE-TEK-2026/archi_arcade/blob/main/documentation/uml.dox">full documentation in plain text</a>

  <a href="https://github.com/ARCADE-TEK-2026/archi_arcade/blob/main/documentation/GourceArchiCommune.mp4">gource du repo archi commune</a>

  Comme vous pouvez le voir, nous avons decider d'integrer un ECS directement dans l'architecture commune.

  Le projet se compose en 3 parties:
  - Le Core (le binaire arcade)
  - Les jeux (sous forme de .so)
  - Les lib graphic (sous forme de .so)

  ----------------------------------------------------------------------------
  LE CORE

  À implementer:
  ```cpp
  /*
    La classe principal pour le binaire arcade.
    Elle doit avoir au moins le main menu, le IGameModule du jeux
    actuel (si chargé), le IDisplayModule de la librairie actuel,
    et un IEventManager qui sera passé en parametre
    à la partie graphique et à la partie jeux.
    À chaque frame, il faut appeler la méthode `update`.
    La méthode `update` doit:
    - regarder si des évènements survenus dans le IEventManager:
       - demande à changer de lib graphique
       - demande à changer de lib de jeux
       - demande à quiter le jeux
       - demande à quiter le programme
    - si un jeux est chargé
        - appeler le `update` du IGameModule
    - sinon
        - appeler le `update` du main menu
    - appeler le `update` du IDisplayModule
  */
  class Arcade::Core::ICore;

  /*
    Le gestionneur des évènements survenu dans toute
    l'éxecution du programme.
  */
  class Arcade::ECS::IEventmanager;
  ```

  ----------------------------------------------------------------------------
  LES JEUX

  Utilisation de sprite communs, soit présents dans l'archi commune dans assets/, soit à ajouter en pr.

  À implementer dans chaque jeux:
  ```cpp
  /*
    L'unité la plus petite de l'ECS, elle possède des composant.
    C'est la relation composant-system(expliqué plus tard)
    qui permet à un ECS de réaliser des actions.
  */
  class Arcade::ECS::IEntity;

  /*
    Un composant représente uniquement des variables que l'on
    vient ajouter à une entité.
  */
  class Arcade::ECS::IComponent;

  /*
    Un gestionneur d'entité.
    Il permet de facilité la recherche de certaines entités.
  */
  class Arcade::ECS::IEntityManager;

  /*
    Ce sont des classes qui sont appelées à chaque frame du
    jeux avec leur méthode `run`.
  */
  class Arcade::ECS::ISystem;

  /*
    Un gestionneur de systeme.
    Il permet de faciliter l'appel de toutes les méthode `run`
    de tous les systemes qu'il posséde.
  */
  class Arcade::ECS::ISystemManager;

  /*
    Représente une étape de cinématique/jeux du jeux.
    La première fois qu'elle est lancé, la méthode `init`
    est appelée.
    Quand la scene est quitté (on change de scene/...)
    la méthode `close` est appelée.
  */
  class Arcade::Game::IScene;

  /*
    L'interface par laquelle le binaire arcade inter-agit.
    À chaque frame, la méthode `update` est appelée.
    À chaque frame, la méthode `getCurrentEntityManager`
    est appelée. Cela permet de passer les entitées qu'il
    faut au IDisplayModule (qui lui va s'occuper d'afficher ce qu'il comprend)
  */
  class Arcade::Game::IGameModule;

  /*
    Des composants "normalisés" qui permettent
    au IDisplayModule d'affiché/de jouer
    ces composants.
  */
  class Arcade::Graph::IMusic; 
  class Arcade::Graph::IText;
  class Arcade::Graph::ISprite;
  ```

  ----------------------------------------------------------------------------
  LES LIB GRAPHIC

  À implementer dans chaque lib graphic:
  ```cpp
  /*
    L'interface par laquelle le binaire arcade inter-agit.
    Il permet de faire un rendu graphique des composant
    "normalisés" (IText, IMusic, ISprite)
    Il doit créer une fenêtre de 1920 par 1080 en pixels et 240 par 67 en terminal
    À chaque frame, la méthode `update` est appelée.
    Il est attendu à ce que cette méthode mette à jour
    les évènements survenus.
  */
  class Arcade::Graph::IDisplayModule;

  /*
    Pour vous faciliter la vie, vous pouvez avoir la même architecure que dans le IGameModule:
    Un ISystemManager qui manage vos différents systemes.
    Dans ce cas:
  */
  class Arcade::ECS::ISystem;
  class Arcade::ECS::ISystemMAnager;
  ```


  ----------------------------------------------------------------------------
  -------------------------- Warnings ----------------------------------------
  ```cpp
  /*
    * To be hable to not have error. Because enum are int, and if game
    * has set a component type `POSITION = 4` and graph has set a component type
    * `SFSPRITE = 4`, the game if it will getEntitiesByComponentType(POSITION)
    * it will also get SFSPRITE (there are int 4 too)
    * To fix this problem:
    * - Graph : CompType range are from 0 to 100 (inclusive)
    * - Core : CompType range are from 101 to 200 (inclusive)
    * - Game : CompType range are from 201 to int max
  */
  ```
  ----------------------------------------------------------------------------

  N.B.: L'écrivain de cette documentation prie de bien vouloir l'excuser pour la prise de partie, il sera heureux de débatre par l'intermédiaire d'issue sur github dans le cas où une information dans cette documentation serait fausse.
  N.B.: Pour get des éléments dans un vecteur const il faut utiliser la méthode .at()

  lien du github: https://github.com/ARCADE-TEK-2026/archi_arcade

  ----------------------------------------------------------------------------

  \image html uml.svg
*/
